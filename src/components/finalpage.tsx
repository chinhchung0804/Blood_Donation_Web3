import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { claimReward } from '../utils/contract';
import { Heart, Gift, Users, Calendar, AlertCircle, CheckCircle } from 'lucide-react';
import '../styles/animation.css';
import { create } from 'ipfs-http-client';

// C·∫•u h√¨nh IPFS client v·ªõi Pinata
const projectId = '686ca06bec3d55f2dbc3'; // Thay b·∫±ng API Key c·ªßa b·∫°n
const projectSecret = '8924f0cb4ac1cb995947dd8c90331f0430a0cdf6b08a6b00144279b53b690769'; // Thay b·∫±ng API Secret c·ªßa b·∫°n
const auth = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mb3JtYXRpb24iOnsiaWQiOiI4OWVkNDcyZi0wZGZjLTRiY2MtYjZjNi1hNWEzNTZhNjhiYTQiLCJlbWFpbCI6InRvbmdjaGluaGNodW5nLmd2MjAwM0BnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGluX3BvbGljeSI6eyJyZWdpb25zIjpbeyJkZXNpcmVkUmVwbGljYXRpb25Db3VudCI6MSwiaWQiOiJGUkExIn0seyJkZXNpcmVkUmVwbGljYXRpb25Db3VudCI6MSwiaWQiOiJOWUMxIn1dLCJ2ZXJzaW9uIjoxfSwibWZhX2VuYWJsZWQiOmZhbHNlLCJzdGF0dXMiOiJBQ1RJVkUifSwiYXV0aGVudGljYXRpb25UeXBlIjoic2NvcGVkS2V5Iiwic2NvcGVkS2V5S2V5IjoiNjg2Y2EwNmJlYzNkNTVmMmRiYzMiLCJzY29wZWRLZXlTZWNyZXQiOiI4OTI0ZjBjYjRhYzFjYjk5NTk0N2RkOGM5MDMzMWYwNDMwYTBjZGY2YjA4YTZiMDAxNDQyNzliNTNiNjkwNzY5IiwiZXhwIjoxNzc3NzgyNzE1fQ.vK2DnPaIo3okY843Ly1aLo59uote0zL4EveEJGW7Ec8'; // Thay b·∫±ng JWT c·ªßa b·∫°n
const ipfs = create({
  url: 'https://api.pinata.cloud/ps/api/v0',
  headers: {
    Authorization: auth,
  },
});

interface FinalPageProps {
  isSidebarExpanded: boolean;
  theme: 'light' | 'dark';
}

function FinalPage({ isSidebarExpanded, theme }: FinalPageProps) {
  const [status, setStatus] = useState<string>('');
  const [statusType, setStatusType] = useState<'success' | 'error' | 'loading' | ''>('');
  const [bloodDrops, setBloodDrops] = useState<Array<{ id: number; left: number; delay: number; duration: number; size: number }>>([]);
  const [showRipple, setShowRipple] = useState<{ x: number; y: number } | null>(null);
  const [donorData, setDonorData] = useState<any>(null);
  const [loadingDonorData, setLoadingDonorData] = useState(true);
  const [errorDonorData, setErrorDonorData] = useState<string | null>(null);
  const navigate = useNavigate();
  const location = useLocation();
  const { donorDataCid } = location.state || {};

  // Generate blood drops on component mount
  useEffect(() => {
    const generateBloodDrops = () => {
      const newDrops = Array.from({ length: 15 }, (_, i) => ({
        id: i,
        left: Math.random() * 100,
        delay: Math.random() * 5,
        duration: 5 + Math.random() * 5,
        size: Math.random() * 30 + 20,
      }));
      setBloodDrops(newDrops);
    };

    generateBloodDrops();
    window.addEventListener("load", generateBloodDrops);
    return () => window.removeEventListener("load", generateBloodDrops);
  }, []);

  // Truy xu·∫•t th√¥ng tin ng∆∞·ªùi hi·∫øn m√°u t·ª´ IPFS
  useEffect(() => {
    const fetchDonorData = async () => {
      if (!donorDataCid) {
        setErrorDonorData('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t l·ªãch.');
        setLoadingDonorData(false);
        return;
      }

      try {
        const response = await fetch(`https://gateway.pinata.cloud/ipfs/${donorDataCid}`);
        const data = await response.json();
        setDonorData(data);
      } catch (err) {
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ IPFS:', err);
        setErrorDonorData('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t·ª´ IPFS. Vui l√≤ng th·ª≠ l·∫°i!');
      } finally {
        setLoadingDonorData(false);
      }
    };

    fetchDonorData();
  }, [donorDataCid]);

  // Ki·ªÉm tra k·∫øt n·ªëi v√≠ v√† nh·∫≠n th∆∞·ªüng
  useEffect(() => {
    const savedAccount = localStorage.getItem('connectedWallet');
    if (!savedAccount) {
      setStatus('Vui l√≤ng k·∫øt n·ªëi v√≠ ƒë·ªÉ nh·∫≠n ph·∫ßn th∆∞·ªüng.');
      setStatusType('error');
      return;
    }

    async function handleClaimReward() {
      try {
        setStatus('ƒêang nh·∫≠n ph·∫ßn th∆∞·ªüng c·ªßa b·∫°n...');
        setStatusType('loading');
        await claimReward();
        setStatus('Nh·∫≠n ph·∫ßn th∆∞·ªüng th√†nh c√¥ng! üéâ');
        setStatusType('success');
      } catch (err) {
        console.error(err);
        setStatus('Nh·∫≠n ph·∫ßn th∆∞·ªüng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.');
        setStatusType('error');
      }
    }

    handleClaimReward();
  }, []);

  const handleNavigate = (e: React.MouseEvent<HTMLButtonElement>) => {
    const rect = e.currentTarget.getBoundingClientRect();
    const x = rect.width / 2;
    const y = rect.height / 2;
    setShowRipple({ x, y });
    setTimeout(() => navigate('/schedule'), 300);
  };

  return (
    <div className={`min-h-screen relative overflow-hidden transition-colors duration-300 ${
      theme === 'dark' ? 'bg-black' : 'bg-gray-100'
    }`}>
      {/* Animated Blood Drops */}
      <div className="absolute inset-0 pointer-events-none">
        {bloodDrops.map((drop) => (
          <div
            key={drop.id}
            className="absolute w-4 h-6 bg-gradient-to-b from-red-600 to-red-800 rounded-b-full rounded-t-[40%] opacity-70 animate-blood-drop"
            style={{
              left: `${drop.left}%`,
              animationDelay: `${drop.delay}s`,
              animationDuration: `${drop.duration}s`,
              width: `${drop.size}px`,
              height: `${drop.size * 1.5}px`,
              transform: "translateZ(0)",
            }}
          />
        ))}
      </div>

      {/* Main Content with Dynamic Padding */}
      <div
        className={`relative z-10 container mx-auto px-4 py-16 transition-all duration-300 ${
          isSidebarExpanded ? 'md:pl-64' : 'md:pl-16'
        } pt-16`}
      >
        <div className={`max-w-4xl mx-auto rounded-2xl p-8 shadow-2xl transition-colors duration-300 ${
          theme === 'dark' ? 'bg-white/10 backdrop-blur-lg' : 'bg-white/90'
        }`}>
          <div className="text-center mb-12">
            <Heart className="w-20 h-20 text-red-600 mx-auto mb-6 animate-heartbeat" />
            <h1 className={`text-4xl font-bold mb-6 hover:text-red-500 transition-colors animate-heartbeat-text ${
              theme === 'dark' ? 'text-white' : 'text-black'
            }`}>
              C·∫£m ∆†n B·∫°n V√¨ H√†nh ƒê·ªông Cao ƒê·∫πp
            </h1>
            <p className={`text-xl mb-8 hover:text-opacity-90 transition-colors ${
              theme === 'dark' ? 'text-gray-300 hover:text-white' : 'text-gray-700 hover:text-black'
            }`}>
              Quy·∫øt ƒë·ªãnh hi·∫øn m√°u c·ªßa b·∫°n s·∫Ω gi√∫p c·ª©u s·ªëng nh·ªØng cu·ªôc ƒë·ªùi qu√Ω gi√°.
            </p>
          </div>

          {/* Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi hi·∫øn m√°u */}
          {loadingDonorData ? (
            <div className="text-center mb-12">
              <p className={`text-lg ${theme === 'dark' ? 'text-white' : 'text-black'}`}>
                ƒêang t·∫£i th√¥ng tin ƒë·∫∑t l·ªãch...
              </p>
            </div>
          ) : errorDonorData ? (
            <div className="text-center mb-12">
              <p className="text-red-500 text-lg">{errorDonorData}</p>
            </div>
          ) : donorData ? (
            <div className={`mb-12 p-6 rounded-xl border transition-colors duration-300 ${
              theme === 'dark' ? 'bg-white/5 border-red-500/20 hover:border-red-500/50' : 'bg-gray-200/50 border-red-400/20 hover:border-red-400/50'
            }`}>
              <h2 className={`text-2xl font-semibold mb-4 text-center ${
                theme === 'dark' ? 'text-white' : 'text-black'
              }`}>
                Th√¥ng Tin ƒê·∫∑t L·ªãch Hi·∫øn M√°u
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <p className={theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}>
                  <strong>H·ªç v√† T√™n:</strong> {donorData.name}
                </p>
                <p className={theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}>
                  <strong>Ng√†y Hi·∫øn M√°u:</strong> {donorData.date}
                </p>
                <p className={theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}>
                  <strong>Th·ªùi Gian:</strong> {donorData.time}
                </p>
                <p className={theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}>
                  <strong>ƒê·ªãa ƒêi·ªÉm:</strong> {donorData.location}
                </p>
              </div>
              {donorData.imageCid && donorData.imageCid !== 'No image uploaded' && (
                <div className="mt-4">
                  <p className={`mb-2 ${theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
                    <strong>H√¨nh ·∫¢nh:</strong>
                  </p>
                  <img
                    src={`https://gateway.pinata.cloud/ipfs/${donorData.imageCid}`}
                    alt="Donor"
                    className="w-full max-w-xs mx-auto rounded-lg"
                  />
                </div>
              )}
              <p className={`mt-4 text-sm ${theme === 'dark' ? 'text-gray-500' : 'text-gray-600'}`}>
                D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u tr√™n IPFS v·ªõi CID: {donorDataCid}
              </p>
            </div>
          ) : null}

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
            <div className={`p-6 rounded-xl border transition-colors duration-300 ${
              theme === 'dark' ? 'bg-white/5 border-red-500/20 hover:border-red-500/50' : 'bg-gray-200/50 border-red-400/20 hover:border-red-400/50'
            }`}>
              <Gift className="w-12 h-12 text-red-500 mb-4 mx-auto" />
              <h3 className={`text-xl font-semibold mb-2 text-center animate-heartbeat-text ${
                theme === 'dark' ? 'text-white' : 'text-black'
              }`}>
                M·ªôt L·∫ßn Hi·∫øn M√°u
              </h3>
              <p className={`text-center ${theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
                C√≥ th·ªÉ c·ª©u ƒë∆∞·ª£c t·ªõi ba cu·ªôc ƒë·ªùi
              </p>
            </div>
            <div className={`p-6 rounded-xl border transition-colors duration-300 ${
              theme === 'dark' ? 'bg-white/5 border-red-500/20 hover:border-red-500/50' : 'bg-gray-200/50 border-red-400/20 hover:border-red-400/50'
            }`}>
              <Users className="w-12 h-12 text-red-500 mb-4 mx-auto" />
              <h3 className={`text-xl font-semibold mb-2 text-center animate-heartbeat-text ${
                theme === 'dark' ? 'text-white' : 'text-black'
              }`}>
                M·ªói 2 Gi√¢y
              </h3>
              <p className={`text-center ${theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
                C√≥ ng∆∞·ªùi c·∫ßn m√°u
              </p>
            </div>
            <div className={`p-6 rounded-xl border transition-colors duration-300 ${
              theme === 'dark' ? 'bg-white/5 border-red-500/20 hover:border-red-500/50' : 'bg-gray-200/50 border-red-400/20 hover:border-red-400/50'
            }`}>
              <Calendar className="w-12 h-12 text-red-500 mb-4 mx-auto" />
              <h3 className={`text-xl font-semibold mb-2 text-center animate-heartbeat-text ${
                theme === 'dark' ? 'text-white' : 'text-black'
              }`}>
                Hi·∫øn M√°u ƒê·ªãnh K·ª≥
              </h3>
              <p className={`text-center ${theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
                Gi√∫p duy tr√¨ ngu·ªìn cung c·∫•p m√°u
              </p>
            </div>
          </div>

          <div className="text-center mb-12">
            <p className={`text-2xl italic mb-4 ${
              theme === 'dark' ? 'text-white' : 'text-black'
            }`}>
              "M√≥n qu√† c·ªßa m√°u l√† m√≥n qu√† c·ªßa s·ª± s·ªëng"
            </p>
            <p className={theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}>
              Cam k·∫øt gi√∫p ƒë·ª° ng∆∞·ªùi kh√°c th√¥ng qua vi·ªác hi·∫øn m√°u c·ªßa b·∫°n th·∫≠t ƒë√°ng ng∆∞·ª°ng m·ªô. C√πng nhau, ch√∫ng ta c√≥ th·ªÉ t·∫°o ra s·ª± thay ƒë·ªïi trong c·ªông ƒë·ªìng.
            </p>
          </div>

          {status && (
            <div className="text-center mb-8">
              <div
                className={`inline-flex items-center gap-2 p-4 rounded-lg ${
                  statusType === 'success'
                    ? 'bg-green-100 text-green-700'
                    : statusType === 'error'
                    ? 'bg-red-100 text-red-700'
                    : 'bg-yellow-100 text-yellow-700'
                }`}
              >
                {statusType === 'success' && <CheckCircle className="w-5 h-5" />}
                {statusType === 'error' && <AlertCircle className="w-5 h-5" />}
                {statusType === 'loading' && (
                  <div className="w-5 h-5 border-2 border-t-transparent border-yellow-700 rounded-full animate-spin"></div>
                )}
                <p className="text-lg font-semibold">{status}</p>
              </div>
            </div>
          )}

          <div className="text-center relative">
            <button
              onClick={handleNavigate}
              className={`py-4 px-8 rounded-lg font-semibold transition-colors inline-flex items-center space-x-2 ${
                theme === 'dark'
                  ? 'bg-red-600 text-white hover:bg-red-700'
                  : 'bg-red-400 text-white hover:bg-red-500'
              }`}
            >
              <Heart className="w-5 h-5" />
              <span>L√™n L·ªãch Hi·∫øn M√°u L·∫ßn N·ªØa</span>
            </button>
            {showRipple && (
              <span
                className="absolute rounded-full bg-red-500 opacity-50 animate-ripple"
                style={{
                  left: showRipple.x,
                  top: showRipple.y,
                  transform: 'translate(-50%, -50%)',
                }}
              />
            )}
            <p className={`mt-4 text-sm ${theme === 'dark' ? 'text-gray-400' : 'text-gray-600'}`}>
              B·∫°n c√≥ th·ªÉ hi·∫øn m√°u l·∫°i sau 56 ng√†y
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

export default FinalPage;