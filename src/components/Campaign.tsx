import React, { useState, useEffect } from 'react';
import { Calendar, Clock, MapPin, Heart, Activity } from 'lucide-react';
import { donateEther, claimReward } from '../utils/contract.jsx';
import Navbar from './Navbar';
import Sidebar from './Sidebar';
import '../styles/animation.css';
import { ethers } from 'ethers';
import contractAddresses from '../contract-address.json';

interface Campaign {
  id: number;
  date: string;
  time: string;
  venue: string;
  votes: number;
}

interface HistoryItem {
  type: 'donation' | 'campaign';
  amount?: string;
  campaignId?: number;
  date: string;
  time: string;
  venue?: string;
  timestamp: string;
  walletAddress?: string;
}

interface CampaignProps {
  isSidebarExpanded: boolean;
  theme: 'light' | 'dark';
}

const Campaign = ({ isSidebarExpanded, theme }: CampaignProps) => {
  const [campaigns, setCampaigns] = useState<Campaign[]>([
    { id: 1, date: '25/03/2024', time: '9:00 - 17:00', venue: 'Trung t√¢m C·ªông ƒë·ªìng Th√†nh ph·ªë', votes: 0 },
    { id: 2, date: '02/04/2024', time: '10:00 - 18:00', venue: 'B·ªánh vi·ªán Trung ∆∞∆°ng', votes: 0 },
    { id: 3, date: '15/04/2024', time: '8:00 - 16:00', venue: 'Khu√¥n vi√™n ƒê·∫°i h·ªçc', votes: 0 },
  ]);

  const [votedFor, setVotedFor] = useState<number | null>(null);
  const [newCampaign, setNewCampaign] = useState({ date: '', time: '', venue: '' });
  const [amount, setAmount] = useState('');
  const [status, setStatus] = useState('');
  const [bloodDrops, setBloodDrops] = useState<Array<{ id: number; left: number; delay: number; duration: number }>>([]);
  const [showHeartbeat, setShowHeartbeat] = useState(false);
  const [walletAddress, setWalletAddress] = useState<string | null>(null);
  const [mtkBalance, setMtkBalance] = useState<string>('0');

  const WALLET_ADDRESS = contractAddresses.Wallet;
  const MTK_TOKEN_ADDRESS = contractAddresses.MTKToken;

  useEffect(() => {
    const connectWallet = async () => {
      if (window.ethereum) {
        try {
          await window.ethereum.request({ method: 'eth_requestAccounts' });
          const provider = new ethers.BrowserProvider(window.ethereum);
          const signer = await provider.getSigner();
          const address = await signer.getAddress();
          setWalletAddress(address);
          window.ethereum.on('accountsChanged', (accounts: string[]) => setWalletAddress(accounts[0] || null));
          await updateMtkBalance(address, provider);
        } catch (err) {
          setStatus('Kh√¥ng th·ªÉ k·∫øt n·ªëi v√≠ MetaMask. Vui l√≤ng th·ª≠ l·∫°i!');
          console.error('Error connecting to MetaMask:', err);
        }
      } else {
        setStatus('Vui l√≤ng c√†i ƒë·∫∑t MetaMask ƒë·ªÉ ti·∫øp t·ª•c!');
      }
    };

    const generateBloodDrops = () => {
      const newDrops = Array.from({ length: 15 }, (_, i) => ({
        id: i,
        left: Math.random() * 100,
        delay: Math.random() * 3,
        duration: 5 + Math.random() * 5,
      }));
      setBloodDrops(newDrops);
    };

    connectWallet();
    generateBloodDrops();
    window.addEventListener('load', generateBloodDrops);
    return () => window.removeEventListener('load', generateBloodDrops);
  }, []);

  const updateMtkBalance = async (address: string, provider: ethers.BrowserProvider): Promise<string> => {
    try {
      const mtkContract = new ethers.Contract(MTK_TOKEN_ADDRESS, ['function balanceOf(address) view returns (uint256)'], provider);
      const balance = await mtkContract.balanceOf(address);
      const formattedBalance = ethers.formatEther(balance);
      setMtkBalance(formattedBalance);
      return formattedBalance;
    } catch (err) {
      console.error('Error fetching MTK balance:', err);
      return '0';
    }
  };

  const addTokenToMetaMask = async () => {
    try {
      await window.ethereum.request({
        method: 'wallet_watchAsset',
        params: {
          type: 'ERC20',
          options: { address: MTK_TOKEN_ADDRESS, symbol: 'MTK', decimals: 18, image: 'https://via.placeholder.com/32' },
        },
      });
      setStatus('ƒê√£ th√™m token MTK v√†o MetaMask!');
    } catch (err) {
      setStatus('Kh√¥ng th·ªÉ th√™m token v√†o MetaMask: ' + (err as Error).message);
    }
  };

  const getErrorMessage = (err: unknown): string => {
    if (typeof err === 'object' && err !== null && 'reason' in err) return (err as { reason: string }).reason;
    if (typeof err === 'object' && err !== null && 'error' in err && typeof (err as { error: unknown }).error === 'object' && (err as { error: { message?: unknown } }).error !== null && 'message' in (err as { error: { message: unknown } }).error) {
      const message = (err as { error: { message: unknown } }).error.message;
      return typeof message === 'string' ? message : 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.';
    }
    if (err instanceof Error && err.message) return err.message;
    return 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.';
  };

  const handleVote = (campaignId: number) => {
    setStatus(`ƒêang x·ª≠ l√Ω b√¨nh ch·ªçn cho Chi·∫øn d·ªãch #${campaignId}...`);
    const updatedCampaigns = campaigns.map((campaign) => (campaign.id === campaignId ? { ...campaign, votes: campaign.votes + 1 } : campaign));
    setCampaigns(updatedCampaigns);
    setVotedFor(campaignId);
    localStorage.setItem('votedCampaign', campaignId.toString());
    localStorage.setItem('campaignVotes', JSON.stringify(updatedCampaigns));
    setStatus(`ƒê√£ b√¨nh ch·ªçn th√†nh c√¥ng cho Chi·∫øn d·ªãch #${campaignId}!`);
    setShowHeartbeat(true);
  };

  const handleDonate = async () => {
    try {
      if (!walletAddress) {
        setStatus('Vui l√≤ng k·∫øt n·ªëi v√≠ MetaMask tr∆∞·ªõc khi quy√™n g√≥p!');
        return;
      }
      if (!amount || parseFloat(amount) < 0.01) {
        setStatus('S·ªë ti·ªÅn quy√™n g√≥p ph·∫£i √≠t nh·∫•t 0.01 ETH ƒë·ªÉ nh·∫≠n th∆∞·ªüng.');
        return;
      }
      setStatus(`ƒêang x·ª≠ l√Ω quy√™n g√≥p ${amount} ETH...`);
      const tx = await donateEther(amount);
      await tx.wait();
      setStatus(`ƒê√£ quy√™n g√≥p th√†nh c√¥ng ${amount} ETH!`);
      const history: HistoryItem[] = JSON.parse(localStorage.getItem('userHistory') || '[]');
      history.push({ type: 'donation', amount, date: new Date().toLocaleDateString(), time: new Date().toLocaleTimeString(), timestamp: new Date().toISOString(), walletAddress });
      localStorage.setItem('userHistory', JSON.stringify(history));
      setAmount('');
      setShowHeartbeat(true);
      const provider = new ethers.BrowserProvider(window.ethereum);
      await updateMtkBalance(walletAddress, provider);
    } catch (err) {
      console.error('L·ªói quy√™n g√≥p:', err);
      setStatus(`L·ªói: ${getErrorMessage(err)}`);
    }
  };

  const handleClaimReward = async () => {
    try {
      if (!walletAddress) {
        setStatus('Vui l√≤ng k·∫øt n·ªëi v√≠ MetaMask tr∆∞·ªõc khi nh·∫≠n th∆∞·ªüng!');
        return;
      }
      setStatus('ƒêang x·ª≠ l√Ω nh·∫≠n ph·∫ßn th∆∞·ªüng...');
      const provider = new ethers.BrowserProvider(window.ethereum);
      const tx = await claimReward();
      console.log('Transaction Hash:', tx.hash);
      const receipt = await tx.wait();
      if (receipt.status !== 1) throw new Error('Giao d·ªãch th·∫•t b·∫°i');
      const newBalance = await updateMtkBalance(walletAddress, provider);
      await addTokenToMetaMask();
      setStatus(`Nh·∫≠n ph·∫ßn th∆∞·ªüng th√†nh c√¥ng! üéâ B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c 1 MTK. S·ªë d∆∞: ${newBalance} MTK`);
      setShowHeartbeat(true);
    } catch (err) {
      console.error('L·ªói nh·∫≠n th∆∞·ªüng:', err);
      setStatus(`L·ªói: ${getErrorMessage(err)}`);
    }
  };

  const handleCreateCampaign = () => {
    if (!walletAddress) {
      setStatus('Vui l√≤ng k·∫øt n·ªëi v√≠ MetaMask tr∆∞·ªõc khi t·∫°o chi·∫øn d·ªãch!');
      return;
    }
    const { date, time, venue } = newCampaign;
    if (!date || !time || !venue) {
      setStatus('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ t·∫°o chi·∫øn d·ªãch.');
      return;
    }
    const newId = campaigns.length + 1;
    const updatedCampaigns = [...campaigns, { id: newId, date, time, venue, votes: 0 }];
    setCampaigns(updatedCampaigns);
    localStorage.setItem('campaignVotes', JSON.stringify(updatedCampaigns));
    const history: HistoryItem[] = JSON.parse(localStorage.getItem('userHistory') || '[]');
    history.push({ type: 'campaign', campaignId: newId, date, time, venue, timestamp: new Date().toISOString(), walletAddress });
    localStorage.setItem('userHistory', JSON.stringify(history));
    setNewCampaign({ date: '', time: '', venue: '' });
    setStatus('ƒê√£ t·∫°o chi·∫øn d·ªãch th√†nh c√¥ng!');
  };

  return (
    <div className={`min-h-screen relative overflow-hidden transition-colors duration-300 ${theme === 'dark' ? 'bg-black' : 'bg-gray-100'}`}>
      <div className="absolute inset-0 pointer-events-none">
        {bloodDrops.map((drop) => (
          <div
            key={drop.id}
            className="absolute w-4 h-6 bg-gradient-to-b from-red-600 to-red-800 rounded-b-full rounded-t-[40%] opacity-70 animate-blood-drop"
            style={{ left: `${drop.left}%`, animationDelay: `${drop.delay}s`, animationDuration: `${drop.duration}s`, transform: 'translateZ(0)' }}
          />
        ))}
      </div>
      {showHeartbeat && (
        <div className="fixed inset-0 flex items-center justify-center pointer-events-none z-50">
          <Heart className="w-20 h-20 text-red-600 animate-heartbeat" />
        </div>
      )}
      <div className={`container mx-auto px-4 py-12 pt-24 ${isSidebarExpanded ? 'md:pl-64' : 'md:pl-16'}`}>
        <h1 className={`text-5xl font-bold text-center mb-8 ${theme === 'dark' ? 'text-red-600' : 'text-red-500'}`}>Hi·∫øn M√°u, C·ª©u Ng∆∞·ªùi</h1>
        {walletAddress ? (
          <p className={`text-center mb-4 ${theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>ƒê√£ k·∫øt n·ªëi v√≠: {walletAddress} | S·ªë d∆∞ MTK: {mtkBalance} MTK</p>
        ) : (
          <p className="text-center mb-4 text-red-500">Vui l√≤ng k·∫øt n·ªëi v√≠ MetaMask ƒë·ªÉ ti·∫øp t·ª•c!</p>
        )}
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto">
          {campaigns.map((campaign) => (
            <div
              key={campaign.id}
              className={`rounded-2xl p-6 shadow-2xl border transform transition-all duration-300 hover:scale-105 ${theme === 'dark' ? 'bg-gray-900 border-red-600' : 'bg-white border-red-400'}`}
            >
              <div className="space-y-4">
                <h2 className={`text-2xl font-bold ${theme === 'dark' ? 'text-red-600' : 'text-red-500'}`}>Chi·∫øn d·ªãch #{campaign.id}</h2>
                <div className="space-y-4">
                  <div className="flex items-center space-x-3">
                    <Calendar className={`w-5 h-5 ${theme === 'dark' ? 'text-red-500' : 'text-red-400'}`} />
                    <div>
                      <h3 className={`font-semibold ${theme === 'dark' ? 'text-white' : 'text-black'}`}>Ng√†y</h3>
                      <p className={theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}>{campaign.date}</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <Clock className={`w-5 h-5 ${theme === 'dark' ? 'text-red-500' : 'text-red-400'}`} />
                    <div>
                      <h3 className={`font-semibold ${theme === 'dark' ? 'text-white' : 'text-black'}`}>Th·ªùi gian</h3>
                      <p className={theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}>{campaign.time}</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <MapPin className={`w-5 h-5 ${theme === 'dark' ? 'text-red-500' : 'text-red-400'}`} />
                    <div>
                      <h3 className={`font-semibold ${theme === 'dark' ? 'text-white' : 'text-black'}`}>ƒê·ªãa ƒëi·ªÉm</h3>
                      <p className={theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}>{campaign.venue}</p>
                    </div>
                  </div>
                </div>
                <div className="mt-6 space-y-4">
                  <div className="text-center">
                    <Activity className={`w-8 h-8 mx-auto mb-2 ${theme === 'dark' ? 'text-red-500' : 'text-red-400'}`} />
                    <p className={`text-2xl font-bold ${theme === 'dark' ? 'text-red-600' : 'text-red-500'}`}>{campaign.votes} l∆∞·ª£t b√¨nh ch·ªçn</p>
                  </div>
                  <button
                    onClick={() => handleVote(campaign.id)}
                    disabled={votedFor !== null}
                    className={`w-full flex items-center justify-center space-x-2 px-6 py-3 rounded-full text-lg font-semibold transition-all ${
                      votedFor !== null
                        ? votedFor === campaign.id
                          ? 'bg-red-600 cursor-not-allowed'
                          : 'bg-gray-700 cursor-not-allowed'
                        : theme === 'dark'
                        ? 'bg-red-600 hover:bg-red-700'
                        : 'bg-red-400 hover:bg-red-500'
                    } ${theme === 'dark' ? 'text-white' : 'text-white'}`}
                  >
                    <Heart className="w-5 h-5" />
                    <span>
                      {votedFor !== null
                        ? votedFor === campaign.id
                          ? 'ƒê√£ b√¨nh ch·ªçn!'
                          : 'ƒê√£ b√¨nh ch·ªçn chi·∫øn d·ªãch kh√°c'
                        : 'Ch√∫ng t√¥i ·ªßng h·ªô'}
                    </span>
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
        <div className={`max-w-lg mx-auto rounded-lg p-6 shadow-2xl border mt-8 ${theme === 'dark' ? 'bg-gray-900 border-red-600' : 'bg-white border-red-400'}`}>
          <h2 className={`text-2xl font-bold mb-4 ${theme === 'dark' ? 'text-red-600' : 'text-red-500'}`}>Quy√™n g√≥p Ether</h2>
          <p className={`mb-4 ${theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
            S·ª± quy√™n g√≥p c·ªßa b·∫°n gi√∫p ch√∫ng t√¥i t·ªï ch·ª©c c√°c chi·∫øn d·ªãch t·ªët h∆°n, ti·∫øp c·∫≠n nhi·ªÅu ng∆∞·ªùi hi·∫øn m√°u h∆°n v√† cung c·∫•p c√°c ti·ªán √≠ch t·ªët h∆°n t·∫°i c√°c ƒë·ªãa ƒëi·ªÉm. M·ªói ƒë√≥ng g√≥p ƒë·ªÅu g√≥p ph·∫ßn c·ª©u s·ªëng m·∫°ng ng∆∞·ªùi!
          </p>
          <form>
            <input
              type="number"
              step="0.01"
              placeholder="S·ªë l∆∞·ª£ng Ether mu·ªën quy√™n g√≥p (t·ªëi thi·ªÉu 0.01 ETH ƒë·ªÉ nh·∫≠n th∆∞·ªüng)"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              className={`w-full p-2 mb-4 border rounded ${theme === 'dark' ? 'bg-black border-gray-700 text-white' : 'bg-gray-100 border-gray-300 text-black'}`}
            />
            <button type="button" onClick={handleDonate} className={`w-full py-2 rounded text-white ${theme === 'dark' ? 'bg-red-600 hover:bg-red-700' : 'bg-red-400 hover:bg-red-500'}`}>
              Quy√™n g√≥p Ether
            </button>
          </form>
        </div>
        <div className={`max-w-lg mx-auto rounded-lg p-6 shadow-2xl border mt-8 ${theme === 'dark' ? 'bg-gray-900 border-red-600' : 'bg-white border-red-400'}`}>
          <h2 className={`text-2xl font-bold mb-4 ${theme === 'dark' ? 'text-red-600' : 'text-red-500'}`}>Nh·∫≠n Ph·∫ßn Th∆∞·ªüng</h2>
          <p className={`mb-4 ${theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
            Quy√™n g√≥p √≠t nh·∫•t 0.01 ETH ƒë·ªÉ nh·∫≠n 1 MTK token nh∆∞ m·ªôt l·ªùi c·∫£m ∆°n cho s·ª± ƒë√≥ng g√≥p c·ªßa b·∫°n! M·ªói ƒë·ªãa ch·ªâ ch·ªâ ƒë∆∞·ª£c nh·∫≠n th∆∞·ªüng m·ªôt l·∫ßn.
          </p>
          <button type="button" onClick={handleClaimReward} className={`w-full py-2 rounded text-white ${theme === 'dark' ? 'bg-red-600 hover:bg-red-700' : 'bg-red-400 hover:bg-red-500'}`}>
            Nh·∫≠n ph·∫ßn th∆∞·ªüng
          </button>
        </div>
        {status && (status.startsWith('ƒê√£ quy√™n g√≥p th√†nh c√¥ng') || status.startsWith('Nh·∫≠n ph·∫ßn th∆∞·ªüng th√†nh c√¥ng')) && (
          <div className={`max-w-lg mx-auto text-center p-4 rounded-lg mt-8 ${theme === 'dark' ? 'bg-green-800' : 'bg-green-200'}`}>
            <p className={`font-bold ${theme === 'dark' ? 'text-white' : 'text-green-800'}`}>{status}</p>
          </div>
        )}
        <div className={`max-w-lg mx-auto rounded-lg p-6 shadow-2xl border mt-4 ${theme === 'dark' ? 'bg-gray-900 border-red-600' : 'bg-white border-red-400'}`}>
          <h2 className={`text-2xl font-bold mb-4 ${theme === 'dark' ? 'text-red-600' : 'text-red-500'}`}>T·∫°o Chi·∫øn d·ªãch M·ªõi</h2>
          <form>
            <input
              type="date"
              value={newCampaign.date}
              onChange={(e) => setNewCampaign({ ...newCampaign, date: e.target.value })}
              className={`w-full p-2 mb-4 border rounded ${theme === 'dark' ? 'bg-black border-gray-700 text-white' : 'bg-gray-100 border-gray-300 text-black'}`}
            />
            <input
              type="text"
              placeholder="Th·ªùi gian (v√≠ d·ª•: 9:00 - 17:00)"
              value={newCampaign.time}
              onChange={(e) => setNewCampaign({ ...newCampaign, time: e.target.value })}
              className={`w-full p-2 mb-4 border rounded ${theme === 'dark' ? 'bg-black border-gray-700 text-white' : 'bg-gray-100 border-gray-300 text-black'}`}
            />
            <input
              type="text"
              placeholder="ƒê·ªãa ƒëi·ªÉm"
              value={newCampaign.venue}
              onChange={(e) => setNewCampaign({ ...newCampaign, venue: e.target.value })}
              className={`w-full p-2 mb-4 border rounded ${theme === 'dark' ? 'bg-black border-gray-700 text-white' : 'bg-gray-100 border-gray-300 text-black'}`}
            />
            <button type="button" onClick={handleCreateCampaign} className={`w-full py-2 rounded text-white ${theme === 'dark' ? 'bg-red-600 hover:bg-red-700' : 'bg-red-400 hover:bg-red-500'}`}>
              T·∫°o Chi·∫øn d·ªãch
            </button>
          </form>
        </div>
        {status && !status.startsWith('ƒê√£ quy√™n g√≥p th√†nh c√¥ng') && !status.startsWith('Nh·∫≠n ph·∫ßn th∆∞·ªüng th√†nh c√¥ng') && (
          <div className="mt-8 text-center">
            <p className={theme === 'dark' ? 'text-blue-400' : 'text-blue-600'}>{status}</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Campaign;